generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bot {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(255)
  description String    @db.Text
  avatarUrl   String    @db.VarChar(255)
  intro       String    @db.Text
  personality String    @db.Text
  format      String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model chatroom {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  message    message[]
}

model checkpoint {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name            String    @db.VarChar(255)
  favorite_images String?   @db.LongText
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model component {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name          String    @db.VarChar(255)
  file_location String    @db.VarChar(255)
  tags          String    @db.LongText
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model embedding {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  link_id    BigInt    @db.UnsignedBigInt
  prompt     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  link       link      @relation(fields: [link_id], references: [id], onUpdate: Restrict, map: "embeddings_link_id_foreign")

  @@index([link_id], map: "embeddings_link_id_foreign")
}

model failed_job {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model gallery {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  public     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  tags       String?   @db.LongText
  prompt     String?   @db.VarChar(255)
  url        String?   @db.VarChar(255)
  favImages  String?   @db.LongText
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "galleries_user_id_foreign")
  image      image[]
  page       page[]

  @@index([user_id], map: "galleries_user_id_foreign")
}

model image {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  url        String    @db.VarChar(255)
  alt_text   String    @db.VarChar(255)
  gallery_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  gallery    gallery   @relation(fields: [gallery_id], references: [id], onUpdate: Restrict, map: "images_gallery_id_foreign")

  @@index([gallery_id], map: "images_gallery_id_foreign")
}

model link {
  id         BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  url        String      @db.VarChar(255)
  created_at DateTime?   @db.Timestamp(0)
  updated_at DateTime?   @db.Timestamp(0)
  embedding  embedding[]
  page       page[]
}

model message {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  chatroom_id BigInt    @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  content     String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  chatroom    chatroom  @relation(fields: [chatroom_id], references: [id], onUpdate: Restrict, map: "messages_chatroom_id_foreign")
  user        user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "messages_user_id_foreign")

  @@index([chatroom_id], map: "messages_chatroom_id_foreign")
  @@index([user_id], map: "messages_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model page {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title            String    @db.VarChar(255)
  description      String    @db.Text
  link_id          BigInt    @db.UnsignedBigInt
  gallery_id       BigInt    @db.UnsignedBigInt
  underDevelopment Boolean
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  gallery          gallery   @relation(fields: [gallery_id], references: [id], onUpdate: Restrict, map: "pages_gallery_id_foreign")
  link             link      @relation(fields: [link_id], references: [id], onUpdate: Restrict, map: "pages_link_id_foreign")

  @@index([gallery_id], map: "pages_gallery_id_foreign")
  @@index([link_id], map: "pages_link_id_foreign")
}

model password_reset_token {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_token {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model pitch {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model prompt {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  phrase     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model tag {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model user {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  gallery           gallery[]
  message           message[]
}
